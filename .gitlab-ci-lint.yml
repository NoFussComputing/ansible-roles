
.linter_defaults:
    stage: validation
    before_script:
        - export PYTHON_VERSION=`python -c 'import sys; version=sys.version_info[:3]; print("{0}.{1}.{2}".format(*version))'`
        - apt update
        - apt install --no-install-recommends -y git
        - python3 -m venv env
        - . env/bin/activate
        - pip install --upgrade pip
        - pip install wheel 
        - pip install ansible
        - pip install setuptools_rust 
        - pip install Rust 
        - pip3 install ansible-lint
        - pip3 install yamllint
        - pip install lxml
#        - pip install ansible-lint-junit
        - pip install ansible-lint-to-junit-xml
        - mkdir $PYTHON_VERSION
    script:
        - ansible-lint -p --nocolor --parseable-severity roles/ > $PYTHON_VERSION/ansible-lint.junit.log 1>&1 || ANSIBLE_LINT=$?
        - cat $PYTHON_VERSION/ansible-lint.junit.log | ansible-lint-to-junit-xml > $PYTHON_VERSION/ansible-lint.junit.xml
        - ls -la $PYTHON_VERSION
        - if [ $ANSIBLE_LINT > 0 ]; then echo "ansible lint failed with $ANSIBLE_LINT"; exit $ANSIBLE_LINT; fi
    after_script:
        - echo deactivate
    artifacts:
      expire_in: 3 days
      when: always
      paths:
          - "*/*.junit.*"
      reports:
          junit:
              - "*/*.junit.xml"
    rules:
        - if: '$CI_COMMIT_BRANCH != "master"'
          when: always


#YAML Lint:
#    extends:
#        - .linter_defaults
#    image: python:3.6-slim
#    script:
#        - yamllint -f parsable roles/ > $PYTHON_VERSION/yaml-lint.junit.log 1>&1 || YAML_LINT=$?
#        - cat $PYTHON_VERSION/yaml-lint.junit.log | ansible-lint-junit -o $PYTHON_VERSION/yaml-lint.junit.xml
#        - if [ $YAML_LINT > 0 ]; then echo "yaml lint failed with $YAML_LINT"; exit $YAML_LINT; fi


Ansible Lint:
    extends:
        - .linter_defaults
    image: python:3.6-slim



.linter_defaults:
    stage: lint
    before_script:
        - ls -la
        - apt update
        - apt install --no-install-recommends -y git
        - python3 -m venv env
        - . env/bin/activate
        - pip install --upgrade pip
        - pip install wheel
        - pip install wheel 
        - pip install ansible
        - pip install setuptools_rust 
        - pip install Rust 
        - pip3 install "ansible-lint[yamllint]"
        - pip install ansible-lint-junit
        - pip install lxml
    script:
        - ls -la
#        - ansible-lint
        - ansible-lint -p --nocolor | ansible-lint-junit -o ansible-lint.junit.xml
    after_script:
        - deactivate
    artifacts:
      expire_in: 3 days
      paths:
          - Integration.JUnit.xml
          - gitlab_management/*.cover
          - .coverage*
      reports:
          junit: ansible-lint.junit.xml

    rules:
#      - if: '$CI_COMMIT_BRANCH != "master"'
      - if: '$CI_COMMIT_BRANCH'
        when: always


# ansible-lint -q -p | ansible-lint-to-junit-xml > ansible-lint-results.xml
# ansible-lint -q -p > ansible-lint-results.log
# ansible-lint-to-junit-xml ansible-lint-results.log > ansible-lint-results.xml

# ansible-lint-junit lxml
# 

# pysam: no cython available - using pre-compiled C
#Python 3.9:
#    extends:
#        - .linter_defaults
#    image: python:3.9-slim

#Python 3.8:
#    extends:
#        - .linter_defaults
#    image: python:3.8-slim


Python 3.6:
#    variables:
#        VERSION_PYTHON: public/$CI_COMMIT_BRANCH/coverage
    extends:
        - .linter_defaults
    image: python:3.6-slim




# python3 -m venv env
#. env/bin/activate
# pip install --upgrade pip
# pip install wheel
# pip3 install "ansible-lint[yamllint]"
# pip install wheel setuptools_rust ansible Rust 


#deactivate

